; Declare a multiboot header that marks the program as a kernel. These are magic
; values that are documented in the multiboot standard. The bootloader will
; search for this signature in the first 8 KiB of the kernel file, aligned at a
; 32-bit boundary. The signature is in its own section so the header can be
; forced to be within the first 8 KiB of the kernel file.
; Multiboot header (must be first, as per your linker script)
section .multiboot
align 4
dd 0x1BADB002            ; Magic number
dd 0x00                  ; Flags (none for now)
dd - (0x1BADB002 + 0x00) ; Checksum

; The multiboot standard does not define the value of the stack pointer register
; (esp) and it is up to the kernel to provide a stack. This allocates room for a
; small stack by creating a symbol at the bottom of it, then allocating 16384
; bytes for it, and finally creating a symbol at the top. The stack grows
; downwards on x86. The stack is in its own section so it can be marked nobits,
; which means the kernel file is smaller because it does not contain an
; uninitialized stack. The stack on x86 must be 16-byte aligned according to the
; System V ABI standard and de-facto extensions. The compiler will assume the
; stack is properly aligned and failure to align the stack will result in
; undefined behavior.
section .bss
align 4096
stack_bottom:
  resb 16384  ; 16KB is reserved for stack
stack_top:


; The linker script specifies _start as the entry point to the kernel and the
; bootloader will jump to this position once the kernel has been loaded. It
; doesn't make sense to return from this function as the bootloader is gone.
; Declare _start as a function symbol with the given symbol size.
section .text

; Define physical addresses of paging structures (adjust based on linker symbols)
; These are physical: subtract 0xC0000000 from virtual symbols if needed
; For example, if linker places _page_directory at virtual 0xC0200000, phys = 0x00200000
PAGE_DIR_PHYS equ 0x00200000    ; Example physical addr of page directory
IDENTITY_PT_PHYS equ PAGE_DIR_PHYS + 0x1000  ; Next 4KB
HIGHER_PT_PHYS equ IDENTITY_PT_PHYS + 0x1000 ; Next 4KB

global _start:
_start:
	; The bootloader has loaded us into 32-bit protected mode on a x86
	; machine. Interrupts are disabled. Paging is disabled. The processor
	; state is as defined in the multiboot standard. The kernel has full
	; control of the CPU. The kernel can only make use of hardware features
	; and any code it provides as part of itself. There's no printf
	; function, unless the kernel provides its own <stdio.h> header and a
	; printf implementation. There are no security restrictions, no
	; safeguards, no debugging mechanisms, only what the kernel provides
	; itself. It has absolute and complete power over the
	; machine.
  
	; This is a good place to initialize crucial processor state before the
	; high-level kernel is entered. It's best to minimize the early
	; environment where crucial features are offline. Note that the
	; processor is not fully initialized yet: Features such as floating
	; point instructions and instruction set extensions are not initialized
	; yet. The GDT should be loaded here. Paging should be enabled here.
	; C++ features such as global constructors and exceptions will require
	; runtime support to work as well.

  ; Step 1: Clear paging structures (optional but good practice)
  mov edi, PAGE_DIR_PHYS
  mov ecx, 1024 * 3          ; 3 * 4KB = dir + 2 tables
  xor eax, eax
  rep stosd                  ; Zero-fill

  ; Step 2: Set up identity page table (map virtual 0x0 to phys 0x0, first 4MB)
  mov edi, IDENTITY_PT_PHYS
  mov eax, 0x0 | 3           ; Phys addr 0x0 + flags (present + r/w)
  mov ecx, 1024              ; 1024 entries (4MB)
.fill_identity:
  mov [edi], eax
  add eax, 0x1000            ; Next 4KB page
  add edi, 4
  loop .fill_identity

  ; Step 3: Set up higher-half page table (map virtual 0xC0000000 to phys 0x0, first 4MB)
  mov edi, HIGHER_PT_PHYS
  mov eax, 0x0 | 3           ; Same as above: phys 0x0 + flags
  mov ecx, 1024
.fill_higher:
  mov [edi], eax
  add eax, 0x1000
  add edi, 4
  loop .fill_higher

  ; Step 4: Fill page directory
  mov edi, PAGE_DIR_PHYS

  ; PDE[0]: Identity map 0x00000000-0x003FFFFF -> identity page table
  mov eax, IDENTITY_PT_PHYS | 3   ; PT phys addr + flags (present + r/w)
  mov [edi], eax

  ; PDE[768]: Higher half 0xC0000000-0xC03FFFFF -> higher page table (768*4MB=3GB)
  mov eax, HIGHER_PT_PHYS | 3
  mov [edi + 768*4], eax          ; Offset 768 entries * 4 bytes

  ; Step 5: Load page directory into CR3 (physical address!)
  mov eax, PAGE_DIR_PHYS
  mov cr3, eax

  ; Step 6: Enable paging (set bit 31 of CR0)
  mov eax, cr0
  or eax, 0x80000000     ; Paging bit
  mov cr0, eax

  ; Step 7: Far jump to higher-half virtual address to flush instruction cache and set CS properly
  ; At this point, we're still executing at physical/virtual 0x0010xxxx (due to identity map)
  jmp 0x08:higher_half   ; Assuming GDT code segment selector 0x08 (GRUB's default)
 
	; If the system has nothing more to do, put the computer into an
	; infinite loop. To do that:
	; 1) Disable interrupts with cli (clear interrupt enable in eflags).
	;    They are already disabled by the bootloader, so this is not needed.
	;    Mind that you might later enable interrupts and return from
	;    kernel_main (which is sort of nonsensical to do).
	; 2) Wait for the next interrupt to arrive with hlt (halt instruction).
	;    Since they are disabled, this will lock up the computer.
	; 3) Jump to the hlt instruction if it ever wakes up due to a
	;    non-maskable interrupt occurring or due to system management mode.
	cli
.hang: hlt
	jmp .hang
.end:

higher_half:
  ; Now running at virtual 0xC0100000+ (higher half mapped)!
  ; Unmap identity mapping if desired (optional: clear PDE[0] and invlpg)
  mov dword [PAGE_DIR_PHYS - 0xC0000000], 0  ; Virtual addr of page dir now accessible
  invlpg [0]                                 ; Invalidate low mappings


	; To set up a stack, we set the esp register to point to the top of our
	; stack (as it grows downwards on x86 systems). This is necessarily done
	; in assembly as languages such as C cannot function without a stack.
  mov esp, stack_top     ; e.g., 0xC0400000 or whatever you define

  ; Pass the multiboot info pointer (in EBX) as an argument to kernel_main
	; This struct includes module details if any modules were loaded by GRUB
	push ebx

	; Enter the high-level kernel. The ABI requires the stack is 16-byte
	; aligned at the time of the call instruction (which afterwards pushes
	; the return pointer of size 4 bytes). The stack was originally 16-byte
	; aligned above and we've since pushed a multiple of 16 bytes to the
	; stack since (pushed 0 bytes so far) and the alignment is thus
	; preserved and the call is well defined.
  ; note, that if you are building on Windows, C functions may have "_" prefix in assembly: _kernel_main
	extern kernel_main ; C entry point (linked at virtual 0xC0100000+)
	call kernel_main

  ; Infinite loop if kmain returns
  cli
  hlt
  jmp $  ; Or triple-fault for debug
